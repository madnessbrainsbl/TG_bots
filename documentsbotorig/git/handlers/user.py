from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
from config import ALLOWED_IDS
from utils.state import get_nested_value, set_nested_value
from utils.validators import validate_field
from utils.file_utils import generate_files, load_templates
from keyboards import templates_kb, confirm_kb, table_row_kb, select_kb, bool_kb
import json

router = Router()
user_states = {}

@router.message(Command("start"))
async def start_handler(message: types.Message):
    if message.from_user.id not in ALLOWED_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É")
        return

    kb = templates_kb(load_templates())
    await message.reply("üìÑ –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:", reply_markup=kb)

@router.callback_query(F.data.startswith("template:"))
async def template_select_handler(callback: types.CallbackQuery):
    if callback.from_user.id not in ALLOWED_IDS:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    slug = callback.data.split(":")[1]
    user_states[callback.from_user.id] = {
        "template": slug,
        "fields": {},
        "step": 0,
        "array": None,  # –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ (—Ç–∞–±–ª–∏—Ü—ã)
    }
    await ask_next_field(callback.from_user.id, callback.message)
    await callback.answer()

async def ask_next_field(user_id, message):
    state = user_states[user_id]
    slug = state["template"]

    import json
    with open(f"templates/{slug}/fields.json", "r", encoding="utf-8") as f:
        template = json.load(f)
    fields = template["fields"]

    if state["step"] >= len(fields):
        preview = "\n".join([f"{f['label']}: {get_nested_value(state['fields'], f['key'])}" for f in fields])
        await message.answer(f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n{preview}", reply_markup=confirm_kb())
        return

    f = fields[state["step"]]
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞ (—Ç–∞–±–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫)
    if f.get("type") == "array":
        items = f.get("items") or f.get("item_fields")
        if not items or not isinstance(items, list):
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –¥–ª—è array —Ç—Ä–µ–±—É–µ—Ç—Å—è items[]")
            state["step"] += 1
            await ask_next_field(user_id, message)
            return
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –º–∞—Å—Å–∏–≤–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
        if not state.get("array") or state["array"].get("field_key") != f["key"]:
            state["array"] = {
                "field_key": f["key"],
                "items": items,
                "rows": [],
                "row_index": 0,
                "col_index": 0,
            }
        arr = state["array"]
        col = arr["items"][arr["col_index"]]
        prompt = f"{f['label']} ‚Üí –°—Ç—Ä–æ–∫–∞ {arr['row_index'] + 1}. {col['label']} (–ø—Ä–∏–º–µ—Ä: {col.get('placeholder','')})"
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ select/bool –≤–Ω—É—Ç—Ä–∏ –º–∞—Å—Å–∏–≤–æ–≤
        if col.get("type") == "select" and isinstance(col.get("options"), list) and col.get("options"):
            await message.answer(prompt, reply_markup=select_kb(col["options"]))
            return
        if col.get("type") == "bool":
            await message.answer(prompt, reply_markup=bool_kb())
            return
        await message.answer(prompt)
        return

    # –æ–±—ã—á–Ω–æ–µ –ø–æ–ª–µ
    required_mark = " (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" if f.get("required") else ""
    prompt = f"{f['label']}{required_mark} (–ø—Ä–∏–º–µ—Ä: {f.get('placeholder','')})"
    if f.get("type") == "select" and isinstance(f.get("options"), list) and f.get("options"):
        await message.answer(prompt, reply_markup=select_kb(f["options"]))
        return
    if f.get("type") == "bool":
        await message.answer(prompt, reply_markup=bool_kb())
        return
    await message.answer(prompt)

@router.message()
async def handle_answer(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states:
        return

    state = user_states[user_id]
    slug = state["template"]

    with open(f"templates/{slug}/fields.json", "r", encoding="utf-8") as f:
        template = json.load(f)

    fields = template["fields"]

    # –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã
    if state["step"] >= len(fields):
        await ask_next_field(user_id, message)
        return

    f = fields[state["step"]]

    # –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤
    if state.get("array") and state["array"].get("field_key") == f["key"]:
        arr = state["array"]
        items = arr["items"]
        col = items[arr["col_index"]]
        text = (message.text or "").strip()
        # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ select/bool –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ (fallback)
        if col.get("type") == "select" and isinstance(col.get("options"), list) and col.get("options"):
            if text in col["options"]:
                if arr.get("current_row") is None:
                    arr["current_row"] = {}
                arr["current_row"][col["key"]] = text
                arr["col_index"] += 1
            else:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–Ω–æ–ø–æ–∫.")
                return
        elif col.get("type") == "bool":
            t = text.lower()
            if t in {"–¥–∞","yes","y","true","1","–¥"}:
                val = "–î–∞"
            elif t in {"–Ω–µ—Ç","no","n","false","0","–Ω"}:
                val = "–ù–µ—Ç"
            else:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç' —Å –∫–Ω–æ–ø–æ–∫.")
                return
            if arr.get("current_row") is None:
                arr["current_row"] = {}
            arr["current_row"][col["key"]] = val
            arr["col_index"] += 1
        else:
            # –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è —Å—Ç—Ä–æ–∫–∏
            if not validate_field(text, col.get("type", "string")):
                await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
            if arr.get("current_row") is None:
                arr["current_row"] = {}
            arr["current_row"][col["key"]] = text
            arr["col_index"] += 1

        # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–±–∞–≤–∏—Ç—å/–≥–æ—Ç–æ–≤–æ
        if arr["col_index"] >= len(items):
            # –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å—Ç—Ä–æ–∫—É, –∂–¥—ë–º —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer("–°—Ç—Ä–æ–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Å—Ç—Ä–æ–∫—É?", reply_markup=table_row_kb())
            return
        else:
            # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–æ–ª–±–µ—Ü
            next_col = items[arr["col_index"]]
            prompt = f"{f['label']} ‚Üí –°—Ç—Ä–æ–∫–∞ {arr['row_index'] + 1}. {next_col['label']} (–ø—Ä–∏–º–µ—Ä: {next_col.get('placeholder','')})"
            if next_col.get("type") == "select" and isinstance(next_col.get("options"), list) and next_col.get("options"):
                await message.answer(prompt, reply_markup=select_kb(next_col["options"]))
                return
            if next_col.get("type") == "bool":
                await message.answer(prompt, reply_markup=bool_kb())
                return
            await message.answer(prompt)
            return

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—è (required/select/bool)
    text = (message.text or "").strip()
    if f.get("required") and not text:
        await message.reply("‚ö†Ô∏è –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    if f.get("type") == "select" and isinstance(f.get("options"), list) and f.get("options"):
        if text not in f["options"]:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–Ω–æ–ø–æ–∫.")
            return
        set_nested_value(state["fields"], f["key"], text)
    elif f.get("type") == "bool":
        t = text.lower()
        if t in {"–¥–∞","yes","y","true","1","–¥"}:
            val = "–î–∞"
        elif t in {"–Ω–µ—Ç","no","n","false","0","–Ω"}:
            val = "–ù–µ—Ç"
        else:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç' —Å –∫–Ω–æ–ø–æ–∫.")
            return
        set_nested_value(state["fields"], f["key"], val)
    else:
        if not validate_field(text, f["type"]):
            await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        set_nested_value(state["fields"], f["key"], text)

    state["step"] += 1
    await ask_next_field(user_id, message)


@router.callback_query(F.data == "confirm")
async def confirm_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_states or user_id not in ALLOWED_IDS:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    state = user_states[user_id]
    docx_path, pdf_path = generate_files(state["template"], state["fields"])

    # –ü–æ–Ω—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
    from datetime import datetime
    ts = datetime.now().strftime("%Y%m%d_%H%M")
    slug = state["template"]
    docx_name = f"{slug}_{ts}.docx"
    pdf_name = f"{slug}_{ts}.pdf"

    await callback.message.answer_document(FSInputFile(docx_path, filename=docx_name))
    if pdf_path and isinstance(pdf_path, str):
        await callback.message.answer_document(FSInputFile(pdf_path, filename=pdf_name))

    import os
    os.remove(docx_path)
    if pdf_path and os.path.exists(pdf_path):
        os.remove(pdf_path)

    await callback.message.answer("‚úÖ –§–∞–π–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    del user_states[user_id]


@router.callback_query(F.data.startswith("opt:"))
async def select_option(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_states or user_id not in ALLOWED_IDS:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    state = user_states[user_id]
    slug = state["template"]
    with open(f"templates/{slug}/fields.json", "r", encoding="utf-8") as f:
        template = json.load(f)
    fields = template["fields"]
    if state["step"] >= len(fields):
        await callback.answer()
        return
    f = fields[state["step"]]

    # –ò–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
    try:
        idx = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer()
        return

    # –ú–∞—Å—Å–∏–≤ (—Ç–∞–±–ª–∏—Ü–∞) –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ?
    if state.get("array") and state["array"].get("field_key") == f.get("key"):
        arr = state["array"]
        items = arr["items"]
        col = items[arr["col_index"]]
        options = col.get("options") or []
        if not isinstance(options, list) or idx < 0 or idx >= len(options):
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
            return
        value = options[idx]
        if arr.get("current_row") is None:
            arr["current_row"] = {}
        arr["current_row"][col["key"]] = value
        arr["col_index"] += 1
        # –ø–µ—Ä–µ—Ö–æ–¥ –¥–∞–ª—å—à–µ
        if arr["col_index"] >= len(items):
            await callback.message.edit_reply_markup(reply_markup=None)
            await callback.message.answer("–°—Ç—Ä–æ–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Å—Ç—Ä–æ–∫—É?", reply_markup=table_row_kb())
            await callback.answer("–í—ã–±—Ä–∞–Ω–æ")
            return
        next_col = items[arr["col_index"]]
        prompt = f"{f['label']} ‚Üí –°—Ç—Ä–æ–∫–∞ {arr['row_index'] + 1}. {next_col['label']} (–ø—Ä–∏–º–µ—Ä: {next_col.get('placeholder','')})"
        await callback.message.edit_reply_markup(reply_markup=None)
        if next_col.get("type") == "select" and isinstance(next_col.get("options"), list) and next_col.get("options"):
            await callback.message.answer(prompt, reply_markup=select_kb(next_col["options"]))
        elif next_col.get("type") == "bool":
            await callback.message.answer(prompt, reply_markup=bool_kb())
        else:
            await callback.message.answer(prompt)
        await callback.answer("–í—ã–±—Ä–∞–Ω–æ")
        return

    # –û–±—ã—á–Ω–æ–µ –ø–æ–ª–µ select
    options = f.get("options") or []
    if not isinstance(options, list) or idx < 0 or idx >= len(options):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        return
    set_nested_value(state["fields"], f["key"], options[idx])
    state["step"] += 1
    await callback.message.edit_reply_markup(reply_markup=None)
    await ask_next_field(user_id, callback.message)
    await callback.answer("–í—ã–±—Ä–∞–Ω–æ")


@router.callback_query(F.data.startswith("bool:"))
async def choose_bool(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_states or user_id not in ALLOWED_IDS:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    state = user_states[user_id]
    slug = state["template"]
    with open(f"templates/{slug}/fields.json", "r", encoding="utf-8") as f:
        template = json.load(f)
    fields = template["fields"]
    if state["step"] >= len(fields):
        await callback.answer()
        return
    f = fields[state["step"]]

    val_token = callback.data.split(":", 1)[1]
    value = "–î–∞" if val_token == "1" else "–ù–µ—Ç"

    # –ú–∞—Å—Å–∏–≤ (—Ç–∞–±–ª–∏—Ü–∞) –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ?
    if state.get("array") and state["array"].get("field_key") == f.get("key"):
        arr = state["array"]
        items = arr["items"]
        col = items[arr["col_index"]]
        if arr.get("current_row") is None:
            arr["current_row"] = {}
        arr["current_row"][col["key"]] = value
        arr["col_index"] += 1
        # –ø–µ—Ä–µ—Ö–æ–¥ –¥–∞–ª—å—à–µ
        if arr["col_index"] >= len(items):
            await callback.message.edit_reply_markup(reply_markup=None)
            await callback.message.answer("–°—Ç—Ä–æ–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Å—Ç—Ä–æ–∫—É?", reply_markup=table_row_kb())
            await callback.answer("–í—ã–±—Ä–∞–Ω–æ")
            return
        next_col = items[arr["col_index"]]
        prompt = f"{f['label']} ‚Üí –°—Ç—Ä–æ–∫–∞ {arr['row_index'] + 1}. {next_col['label']} (–ø—Ä–∏–º–µ—Ä: {next_col.get('placeholder','')})"
        await callback.message.edit_reply_markup(reply_markup=None)
        if next_col.get("type") == "select" and isinstance(next_col.get("options"), list) and next_col.get("options"):
            await callback.message.answer(prompt, reply_markup=select_kb(next_col["options"]))
        elif next_col.get("type") == "bool":
            await callback.message.answer(prompt, reply_markup=bool_kb())
        else:
            await callback.message.answer(prompt)
        await callback.answer("–í—ã–±—Ä–∞–Ω–æ")
        return

    # –û–±—ã—á–Ω–æ–µ –ø–æ–ª–µ bool
    set_nested_value(state["fields"], f["key"], value)
    state["step"] += 1
    await callback.message.edit_reply_markup(reply_markup=None)
    await ask_next_field(user_id, callback.message)
    await callback.answer("–í—ã–±—Ä–∞–Ω–æ")


@router.callback_query(F.data.in_({"row:add", "row:done"}))
async def rows_control(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_states or user_id not in ALLOWED_IDS:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    state = user_states[user_id]
    slug = state["template"]
    with open(f"templates/{slug}/fields.json", "r", encoding="utf-8") as f:
        template = json.load(f)
    fields = template["fields"]
    if state["step"] >= len(fields):
        await callback.answer()
        return
    f = fields[state["step"]]
    arr = state.get("array")
    if not arr or arr.get("field_key") != f.get("key"):
        await callback.answer()
        return

    action = callback.data.split(":", 1)[1]
    if action == "done":
        # –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if arr.get("current_row") and len(arr["current_row"]) > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
            if len(arr["current_row"]) == len(arr["items"]):
                arr["rows"].append(arr["current_row"])
                print(f"[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞: {arr['current_row']}")
            arr["current_row"] = None
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Å—Å–∏–≤ –≤ –∏—Ç–æ–≥–æ–≤—ã–µ –ø–æ–ª—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        print(f"[DEBUG] –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Å–∏–≤ —Å {len(arr['rows'])} —Å—Ç—Ä–æ–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—è {f['key']}")
        set_nested_value(state["fields"], f["key"], arr["rows"])
        state["array"] = None
        state["step"] += 1
        await callback.message.edit_reply_markup(reply_markup=None)
        await ask_next_field(user_id, callback.message)
        await callback.answer("–ì–æ—Ç–æ–≤–æ")
        return

    if action == "add":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (—É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ + —Ç–µ–∫—É—â–∞—è)
        total_rows = len(arr["rows"])
        if arr.get("current_row") and len(arr["current_row"]) > 0:
            total_rows += 1
        
        if total_rows >= 50:
            await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 50 —Å—Ç—Ä–æ–∫", show_alert=True)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if arr.get("current_row") and len(arr["current_row"]) == len(arr["items"]):
                arr["rows"].append(arr["current_row"])
                arr["current_row"] = None
            # –∫–∞–∫ –±—É–¥—Ç–æ –Ω–∞–∂–∞–ª–∏ done
            set_nested_value(state["fields"], f["key"], arr["rows"])
            state["array"] = None
            state["step"] += 1
            await callback.message.edit_reply_markup(reply_markup=None)
            await ask_next_field(user_id, callback.message)
            return
        # –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–æ–∫—É
        if arr.get("current_row") and len(arr["current_row"]) == len(arr["items"]):
            arr["rows"].append(arr["current_row"])
            print(f"[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {arr['row_index'] + 1}: {arr['current_row']}")
        # –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        arr["current_row"] = {}
        arr["row_index"] += 1
        arr["col_index"] = 0
        first_col = arr["items"][0]
        await callback.message.edit_reply_markup(reply_markup=None)
        prompt = f"{f['label']} ‚Üí –°—Ç—Ä–æ–∫–∞ {arr['row_index'] + 1}. {first_col['label']} (–ø—Ä–∏–º–µ—Ä: {first_col.get('placeholder','')})"
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ select/bool –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        if first_col.get("type") == "select" and isinstance(first_col.get("options"), list) and first_col.get("options"):
            await callback.message.answer(prompt, reply_markup=select_kb(first_col["options"]))
        elif first_col.get("type") == "bool":
            await callback.message.answer(prompt, reply_markup=bool_kb())
        else:
            await callback.message.answer(prompt)
        await callback.answer("–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É")
